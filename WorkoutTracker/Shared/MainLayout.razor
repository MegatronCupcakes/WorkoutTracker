@inherits LayoutComponentBase
@inject IJSRuntime js;
@using WorkoutTracker.DataAccess;
@using WorkoutTracker.Models;
@using WorkoutTracker.Pages

@if (ShowSpinner)
{
    <Spinner />
}
<div class="container-fluid fade-in">    
    @if (DbInitializationComplete)
    {
        <NavMenu DisplayPage="@DisplayPage" HandleUiChange="@HandleUiChange" />
        <div id="contentSpacer" style="height: 5em; width: 100%;"></div>
        <CascadingValue Value="@ToggleSpinner">
        <CascadingValue Value="@Collections">                           
            @switch (DisplayPage["activePage"])
            {
                case "about":
                    <About />
                    break;
                case "exercises":
                    <Exercises />
                    break;
                case "export":
                    <Export />
                    break;
                case "import":
                    <Import />
                    break;
                case "metrics":
                    <Metrics />
                    break;
                case "programs":
                    <Programs />
                    break;
                case "routines":
                    <Routines />
                    break;
                case "workout":
                    <Workout />
                    break;
                case "settings":
                    <Settings />
                    break;
                default:
                    <Workout />
                    break;
            }
        </CascadingValue>
        </CascadingValue>
    }
</div>

@code {
    public Dictionary<string, string> DisplayPage { get; set; } = new Dictionary<string, string>() { { "activePage", "workout" } };
    public Dictionary<string, IndexedDb> Collections { get; set; } = new Dictionary<string, IndexedDb>();
    public bool ShowSpinner { get; set; } = false;
    private bool DbInitializationComplete { get; set; } = false;

    private static Dictionary<string, List<string>> CollectionSettings = new Dictionary<string, List<string>>()
    {
        {"workouts", new List<string>(){ "startedAt", "completedAt" }},
        {"programs", new List<string>()},
        {"routines", new List<string>()},
        {"exercises", new List<string>()},
        {"settings", new List<string>()}
    };

    private Queue<string> CollectionInitQueue = new Queue<string>(CollectionSettings.Keys);
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            InitializeFromQueue();
        }
    }

    private void InitializeFromQueue()
    {
        var collectionName = CollectionInitQueue.Dequeue();
        var indexedDb = (CollectionSettings[collectionName] != null && CollectionSettings[collectionName].Count > 0) ?
            new IndexedDb(js, collectionName, CollectionSettings[collectionName]) : new IndexedDb(js, collectionName);
        indexedDb.DbInitialized += indexedDb_DbInitialized;
    }

    private async void HandleUiChange()
    {              
        StateHasChanged();
    }

    private async void indexedDb_DbInitialized(object sender, bool Initialized)
    {
        var indexedDb = (IndexedDb)sender;
        Collections.Add(indexedDb.Name, indexedDb);
        if (CollectionInitQueue.Count > 0)
        {
            InitializeFromQueue();
        } 
        else
        {
            DbInitializationComplete = true;
            HandleUiChange();
        }
    }

    public void ToggleSpinner()
    {
        ShowSpinner = !ShowSpinner;
        StateHasChanged();
    }
}