@inherits LayoutComponentBase
@inject IJSRuntime js;
@using WorkoutTracker.DataAccess;
@using WorkoutTracker.Models;
@using WorkoutTracker.Pages

@if (ShowSpinner)
{
    <Spinner />
}
<div class="container-fluid fade-in">    
    @if (DbInitializationComplete)
    {
        <NavMenu ShowWizard="@ShowWizard" DisplayPage="@DisplayPage" HandleUiChange="@HandleUiChange" />
        <div class="contentSpacer"></div>
        <CascadingValue Value="@ToggleSpinner">
        <CascadingValue Value="@Collections">
                @if (ShowWizard)
                {
                    <Wizard SettingsId="@SettingsId" HandleUiChange="@HandleUiChange" />
                } else
                {
                    @switch (DisplayPage["activePage"])
                    {
                        case "about":
                            <About />
                            break;
                        case "exercises":
                            <Exercises />
                            break;
                        case "export":
                            <Export />
                            break;
                        case "import":
                            <Import />
                            break;
                        case "metrics":
                            <Metrics />
                            break;
                        case "programs":
                            <Programs />
                            break;
                        case "routines":
                            <Routines />
                            break;
                        case "workout":
                            <Workout />
                            break;
                        case "settings":
                            <Settings />
                            break;
                        default:
                            <Workout />
                            break;
                    }
                }                
        </CascadingValue>
        </CascadingValue>
    }
    <div class="contentSpacer"></div>
</div>

@code {
    public Dictionary<string, string> DisplayPage { get; set; } = new Dictionary<string, string>() { { "activePage", "workout" } };
    public Dictionary<string, IndexedDb> Collections { get; set; } = new Dictionary<string, IndexedDb>();
    public bool ShowSpinner { get; set; } = false;
    public bool ShowWizard { get; set; } = false;
    public string? SettingsId { get; set; }

    private bool DbInitializationComplete { get; set; } = false;
    private Queue<string> CollectionInitQueue = new Queue<string>(CollectionDefinitions.Definitions.Keys);



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            InitializeFromQueue();
        }
    }

    private void InitializeFromQueue()
    {
        var collectionName = CollectionInitQueue.Dequeue();
        var indexedDb = (CollectionDefinitions.Definitions[collectionName] != null && CollectionDefinitions.Definitions[collectionName].Count > 0) ?
            new IndexedDb(js, collectionName, CollectionDefinitions.Definitions[collectionName]) : new IndexedDb(js, collectionName);
        indexedDb.DbInitialized += indexedDb_DbInitialized;
    }

    private async void HandleUiChange()
    {              
        StateHasChanged();
    }

    private async void indexedDb_DbInitialized(object sender, bool Initialized)
    {
        var indexedDb = (IndexedDb)sender;
        Collections.Add(indexedDb.Name, indexedDb);
        if (CollectionInitQueue.Count > 0)
        {
            InitializeFromQueue();
        } 
        else
        {
            DbInitializationComplete = true;
            var appSettings = await WorkoutTracker.Models.Settings.GetSettings(Collections);
            SettingsId = appSettings._id;
            ShowWizard = appSettings.WizardEnabled;
            HandleUiChange();
        }
    }

    public void ToggleSpinner()
    {
        ShowSpinner = !ShowSpinner;
        StateHasChanged();
    }
}