@using System.Text.Json;
@using WorkoutTracker.DataAccess;
@using WorkoutTracker.Models;
@using WorkoutTracker.Forms;

<button class="@GetButtonClasses()" data-bs-toggle="modal" data-bs-target="#@GetModalId()">@Activity</button>
<div id="@GetModalId()" class="modal modal-lg fade" tabIndex="-1" data-bs-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@GetTitle()</h5>
                <button type="button" class="btn-close" data-bs-toggle="modal" data-bs-target="#@GetModalId()" aria-label="Close"></button>
            </div>
            <div class="modal-body">                
                @if(Activity == "delete")
                {
                    <div class="col-12">
                        are you sure you want to delete "@GetTitle()" permanently?
                    </div>
                } 
                else
                {
                    @if (Type == "Program")
                    {
                        @(ChangeDocument = Document == null ? new Program() : Document)
                        <ProgramForm Document="@((Program)Document)" ChangeDocument="@ChangeDocument" />
                    }
                    @if (Type == "Routine")
                    {
                        @(ChangeDocument = Document == null ? new Routine() : Document)
                        <RoutineForm Document="@((Routine)Document)" ChangeDocument="@ChangeDocument" />
                    }
                    @if (Type == "Exercise")
                    {
                        @(ChangeDocument = Document == null ? new Exercise() : Document)
                        <ExerciseForm Document="@((Exercise)Document)" ChangeDocument="@ChangeDocument" />
                    }
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-sm btn-default" data-bs-toggle="modal" data-bs-target="#@GetModalId()">cancel</button>
                @if(Activity == "delete")
                {
                    <button class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#@GetModalId()" onclick="@HandleDelete">delete</button>
                } 
                else if(Activity == "edit")
                {
                    <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#@GetModalId()" onclick="@HandleUpdate">save</button>
                }
                else if(Activity == "add")
                {
                    <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#@GetModalId()" onclick="@HandleInsert">save</button>
                }                
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Dictionary<string, IndexedDb> Collections { get; set; }
    [Parameter]
    public ActivityBase? Document { get; set; }
    [Parameter]
    public string Type { get; set; }
    [Parameter]
    public string Activity { get; set; } = "add";
    [Parameter]
    public Action? HandleStateChange { get; set; }

    public dynamic? ChangeDocument { get; set; }

    private string GetCollectionName()
    {
        return $"{(Document == null ? Type.ToLower() : Document.GetType().ToString().Split('.').Last())}s";
    }

    private string GetModalId()
    {
        string modalId = $"{Activity}_modal";
        if (Type != null)
        {
            modalId = $"{Activity}_{Type}_modal";
        }
        if (Document != null)
        {
            modalId = $"{Activity}_{Document._id}_modal";
        }
        return modalId;
    }

    private string GetButtonClasses()
    {
        string buttonClasses = "btn btn-sm btn-default";
        if (Activity == "add")
        {
            buttonClasses = "btn btn-sm btn-primary";
        }
        if (Activity == "delete")
        {
            buttonClasses = "btn btn-sm btn-danger";
        }
        return buttonClasses;
    }

    private string GetTitle()
    {
        string title = $"Add New {Type}";
        if (Document != null)
        {
            title = Document.Name;
        }
        return title;
    }

    private void RefreshUi()
    {        
        HandleStateChange?.Invoke();
    }

    private async Task<string> HandleInsert()
    {
        var documentId = await Collections[GetCollectionName()].Insert(ChangeDocument);
        RefreshUi();
        return documentId;
    }

    private async Task<bool> HandleUpdate()
    {
        dynamic updateDictionary;
        var queryDictionary = new Dictionary<string, string>() { { "_id", Document._id } };
        updateDictionary = new Dictionary<string, object>() { { "$set", ChangeDocument } };        
        var updated = await Collections[GetCollectionName()].Update(queryDictionary, updateDictionary);
        RefreshUi();
        return updated;
    }

    private async Task<bool> HandleDelete()
    {
        var queryDictionary = new Dictionary<string, string>() { { "_id", Document._id } };
        var deleted = await Collections[GetCollectionName()].Remove(queryDictionary);
        RefreshUi();
        return deleted;
    }
}
