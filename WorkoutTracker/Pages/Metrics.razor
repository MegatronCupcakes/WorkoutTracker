@using System.Text.Json
@using WorkoutTracker.DataAccess
@inject IJSRuntime JsRuntime;

<div class="container fade-in fade-out">
    @if (!ShowSpinner)
    {
        @if (ExercisesInSpan.Count > 0)
        {
            <div class="col-12 mb-3">
                <div class="row">
                    <div class="col">
                        <select class="form-select" aria-label="select exercise" @onchange="HandleExerciseSelection" value="@SelectedExercise">
                            @foreach (var exercise in ExercisesInSpan)
                            {
                                <option value="@exercise">@exercise</option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <select class="form-select" aria-label="select timespan" @onchange="HandleSpanSelection" value="@SelectedTimespan">
                            @foreach (var span in new List<int>() { 12, 9, 6, 3, 1 })
                            {
                                <option value="@span">in the last @(span > 1 ? span : "") @(span > 1 ? "months" : "month")</option>
                            }
                        </select>
                    </div>
                </div>
            </div>            
        } else
        {
            <div class="col-12">
                <i class="bi bi-emoji-frown"></i> ...looks like you haven't done anything yet
            </div>
        }        
    }
    <div class="col-12">
        <canvas id="chartCanvas"></canvas>
    </div>
</div>

@code {
    [CascadingParameter]
    public Dictionary<string, IndexedDb> Collections { get; set; }
    [CascadingParameter]
    public Action? ToggleSpinner { get; set; }

    private bool ShowSpinner { get; set; } = true;
    private List<string> ExercisesInSpan { get; set; } = new List<string>();
    private string? SelectedExercise { get; set; }
    private int SelectedTimespan { get; set; } = 12;
    private static JsonSerializerOptions serializeOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (ToggleSpinner != null) ToggleSpinner();
            RefreshUi();
        }
    }

    public async void RefreshUi()
    {
        var initialDate = DateTime.Today.AddMonths(0 - SelectedTimespan);        
        var workouts = await Collections["workouts"].Find<List<WorkoutTracker.Models.Workout>>(
            new { Started = true, StartedAt = new Dictionary<string, DateTime>() { {"$gt", initialDate } } },
            new { Sort = new { StartedAt = 1 }, Fields = new { Routines = 1 } }
        );
        ExercisesInSpan = workouts.SelectMany(workout => workout.Routines.SelectMany(routine => routine.RoutineExercises.Select(exercise => exercise.Name))).Distinct().ToList();
        if (ExercisesInSpan.Count > 0)
        {
            if (SelectedExercise == null || !ExercisesInSpan.Contains(SelectedExercise)) SelectedExercise = ExercisesInSpan[0];
            var exerciseWeights = workouts.SelectMany(workout => workout.Routines.SelectMany(routine => routine.RoutineExercises.Where(exercise => exercise.Name == SelectedExercise).Select(exercise => exercise.EndingWeight))).ToList();
            var exerciseDates = workouts.SelectMany(workout => workout.Routines.SelectMany(routine => routine.RoutineExercises.Where(exercise => exercise.Name == SelectedExercise).Select(exercise => exercise.CompletedAt))).ToList();

            // backfill labels and data for missing dates in range
            var today = DateTime.Now;
            var labels = new List<string>();
            var data = new List<int?>();
            for (var dateInRange = initialDate; dateInRange <= today; dateInRange = dateInRange.AddDays(1))
            {
                var date = dateInRange.ToString("MM/dd/yyyy");
                int? value = null;
                var listIndex = exerciseDates.FindIndex(_date => _date?.Date == dateInRange.Date);
                if (listIndex > -1)
                {
                    value = exerciseWeights[listIndex];                    
                }                
                labels.Add(date);
                data.Add(value);
            }

            var dataSets = new List<object>()
            {
                new
                {
                    Label = $"{SelectedExercise} in the last {(SelectedTimespan > 1 ? SelectedTimespan : "")} {(SelectedTimespan > 1 ? "months" : "month")}",
                    Data = data
                }
            };
            // drawChart: (canvasId, chartType, labels, dataSets)
            var charted = await JsRuntime.InvokeAsync<bool>(
                "ChartTools.drawChart",
                "chartCanvas",
                "line",
                JsonSerializer.Serialize(labels, serializeOptions),
                JsonSerializer.Serialize(dataSets, serializeOptions)
            );
        }        
        if (ToggleSpinner != null && ShowSpinner) ToggleSpinner();
        ShowSpinner = false;
        StateHasChanged();
    }

    private void HandleExerciseSelection(ChangeEventArgs e)
    {
        SelectedExercise = (string)e.Value;
        RefreshUi();
    }
    private void HandleSpanSelection(ChangeEventArgs e)
    {
        SelectedTimespan = Int32.Parse(e.Value.ToString());
        RefreshUi();
    }
    private string IsSelectedSpan(int span)
    {
        return span == SelectedTimespan ? "selected" : "";
    }
    private string isSelectedExercise(string exercisName)
    {
        return exercisName == SelectedExercise ? "selected" : "";
    }
}